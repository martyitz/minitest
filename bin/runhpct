#!/bin/sh

#------------------------------------------------------------
# runhpct:
#
#  a script that will invoke hpcrun to collect a measurements
#  directory, process it with hpcstruct, and then process
#  it with hpcprof to produce a database directory.
#------------------------------------------------------------

#------------------------------------------------------------
# usage message
#------------------------------------------------------------

usage()
{
	    cat <<EOF 1>&2

Usage:
  runhpct [-n] <"target-app args"> <"hpcrun args"> <name> [<"hpcstruct args">]

  [-n] means show what would be run, but don't run it

  Arg 1: the target application name, and any arguments it needs
    If the target-app needs arguments Arg 1 should be a quoted string

  Arg2: The hpcrun arguments inside a quoted string

  Arg3: A string to be used in constructing file and directory names:
    meas.<name>/
    dbase.<name>/
    log.<name>

  Arg4: If needed, extra hpcstruct arguments
EOF
    exit 1
}


#------------------------------------------------------------
# the script
#------------------------------------------------------------

if [ "$1" == "-n" ]; then 
        norun=yes
        shift
else
        norun=no
fi

# $1 the target and its arguments
if [ "$1" == "" ]; then
	usage
else
	targargs=./$1

fi

# $2 the hpcrun arguments to be used
if [ "$2" == "" ]; then
	usage
else
	runargs=$2
fi

# $3 the name to be used for directories and files
if [ "$3" == "" ]; then
	usage
else
	name=$3
fi

# $4 [optional] the hpcstruct arguments to be used

#------------------------------------------------------------
# Now the actual commands
#------------------------------------------------------------

pwd > log.$name
date >> log.$name
hpcrun -V >> log.$name 2>&1
echo "  CUDA_HOME = $CUDA_HOME" >> log.$name
echo "  ROCM_PATH = $ROCM_PATH" >> log.$name
echo "" >> log.$name

if [ "$norun" == "yes" ]; then
	echo "/usr/bin/time -p hpcrun $targargs $runargs -o meas.$name >>log.$name 2>&1"
	exit 0
fi
usesgpu=`echo $runargs | grep "-e gpu="`
if [  "$usesgpu" == "" ]; then
	echo "     No GPU profiling requested"  |  tee -a log.$name
else
	echo "     GPU profiling is requested; gpubins-used should be non-zero"  |  tee -a log.$name
fi

echo "Launching /usr/bin/time hpcrun -o meas.$name $runargs $targargs >>log.$name 2>&1"
echo "Launching /usr/bin/time hpcrun -o meas.$name $runargs $targargs >>log.$name 2>&1" >>log.$name
/usr/bin/time hpcrun -o meas.$name $runargs $targargs >>log.$name 2>&1
grep avgtext log.$name
echo " " >> log.$name

# now look for various possible run time errors in the log file produced
/bin/rm -f rterrs.$name
grep ERROR log.$name >> rterrs.$name
grep "Memory Error" log.$name >> rterrs.$name
grep "No valid target devices" log.$name >> rterrs.$name
grep "device offloading is now disabled" log.$name >> rterrs.$name
grep "Command terminated" log.$name >> rterrs.$name
grep "HPCToolkit fatal error" log.$name >> rterrs.$name
grep "Failed to allocate device vector" log.$name >> rterrs.$name
grep "Failed to copy" log.$name >> rterrs.$name
grep "Failed to free" log.$name >> rterrs.$name
grep "Failed to launch compute kernel" log.$name >> rterrs.$name
grep "libgomp: cuMemAlloc error: out of memory" log.$name >> rterrs.$name
grep "libgomp: device memory allocation fail" log.$name >> rterrs.$name
grep "Command exited with non-zero status" log.$name >> rterrs.$name
grep "symbol lookup error" log.$name >> rterrs.$name
grep "call to cuMemAlloc returned error" log.$name >> rterrs.$name

if [ -a rterrs.$name ]; then
	errs=`cat rterrs.$name | wc -l `
	if [ "${errs}" == "0" ]; then
		echo "    No runtime errors found." |  tee -a log.$name
	else
		echo "ERROR; found $errs runtime lines indicating errors:" |  tee -a log.$name
		cat rterrs.$name
		echo ""
		exit 0
	fi
else
	echo "ERROR -- SHOULD NEVER HAPPEN -- rterrs file not found" |  tee -a log.$name
fi

# Make sure there was a measurements directory; if so count CPU/GPU threads
if [ -d meas.$name ]; then
	echo " " | tee -a log.$name
	THREADS=`ls meas.$name/*.hpcrun | wc -l`
	CPUTHREADS=`ls meas.$name/*-000000-[01234]*.hpcrun 2>/dev/null | wc -l`
	GPUTHREADS=`ls meas.$name/*-000000-[56789]*.hpcrun 2>/dev/null | wc -l`
	echo "  Experiment hpcrun files: $THREADS   CPU = $CPUTHREADS   GPU = $GPUTHREADS" | tee -a log.$name
else
	echo "ERROR: measurements directory does not exist" | tee -a log.$name
	echo " "  | tee -a log.$name
	exit 0
fi

echo "" >> log.$name
echo "=================================================================" >> log.$name
echo "" >> log.$name
# echo "Launching /usr/bin/time -p hpcstruct $4 meas.$name  >>log.$name 2>&1"
echo "Launching /usr/bin/time -p hpcstruct $4 meas.$name  >>log.$name 2>&1" >> log.$name
/usr/bin/time -p hpcstruct $4 meas.$name  >>log.$name 2>&1

if [ -d meas.${name}/gpubins-used ]; then
	GPUBINSUSED=`ls meas.${name}/gpubins-used | wc -l`
else
	GPUBINSUSED=0
fi
echo "  Experiment gpubins-used: $GPUBINSUSED" | tee -a log.$name

if [  "$usesgpu" != "" ]; then
	if [ "$GPUTHREADS" == "0" ]; then
		echo "ERROR: expected gpubins-used is 0; should be non-zero"  >> log.$name
	fi
fi

echo "" >> log.$name
echo "=================================================================" >> log.$name
echo "" >> log.$name
# echo "Launching /usr/bin/time -p hpcprof -o dbase.$name meas.$name  >>log.$name 2>&1"
echo "Launching /usr/bin/time -p hpcprof -o dbase.$name meas.$name  >>log.$name 2>&1" >>log.$name
/usr/bin/time -p hpcprof -o dbase.$name meas.$name  >>log.$name 2>&1
echo ""
grep ERROR log.$name
echo ""
echo "=================================================================" >> log.$name
echo "" >> log.$name
ls -lF >> log.$name
echo "" >> log.$name
