#!/bin/bash
#------------------------------------------------------------
# minitest:
#
#  a script iterate over subdirectories, and run a make command on each
#------------------------------------------------------------

#------------------------------------------------------------
# usage message
#------------------------------------------------------------

usage()
{
	    cat <<EOF
minitest is a shell script that will process a set of subdirectories
inside a TEST repository.  It requires that it be invoked with two
definitions:

    TOPDIR, pointing to the top of the repository; and
    RUNDIRS, a list of the subdirectories to be processed.

    Both of these are obtained by sourcing a file named
    "miniconfig" in the same directory as this script.

    An "example.miniconfig" file is in this directory, and should
    be used as a template for customizing the test run.

Usage:
  minitest <makecmd>
	Only <makecmd>'s of "ll", "clean", "clobber", "default", "run", and "hpct" are supported

EOF
    exit 1
}


#------------------------------------------------------------
# the script
#------------------------------------------------------------

if [ -a miniconfig ]; then
	source ./miniconfig
else
	echo "ERROR no miniconfig file is found"
	echo "Please create a miniconfig file; be sure to set TOPDIR in it"
	echo "and customize the list of tests."
	echo ""
	usage
	exit 1
fi


if [ "${TOPDIR}" == "" ]; then
	echo "TOPDIR is not set."
	usage
fi
if [ "${RUNDIRS}" == "" ]; then
	echo "RUNDIRS is not set."
	usage
fi
echo ""

export PATH=$PATH:$TOPDIR/bin

# echo "TOPDIR: "
# echo -n "RUNDIRS: "
# for sd in "${RUNDIRS[@]}"
# do
# 	echo -n " $sd"
# done
# echo ""

go="f"

if [ "$1" == "ll" ]; then
	go="ll"
fi

if [ "$1" == "clean" ]; then
	go="t"
fi

if [ "$1" == "all" ]; then
	go="t"
fi
if [ "$1" == "default" ]; then
	go="t"
fi

if [ "$1" == "clobber" ]; then
	go="t"
fi

if [ "$1" == "run" ]; then
	go="t"
fi

if [ "$1" == "hpct" ]; then
	go="t"
fi

if [ "$go" == "f" ]; then
	usage
fi

# remove any previous log of a run
/bin/rm -f log.minitest

# create a new log, with information about the system
echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" 2>&1 | tee -a log.minitest
echo -n "minitest $1 -- invoked on " 2>&1 | tee -a log.minitest
date 2>&1 | tee -a log.minitest
pwd 2>&1 | tee -a log.minitest
echo -n "${USER} @ " | tee -a log.minitest
hostname 2>&1 | tee -a log.minitest
module list 2>&1 | tee -a log.minitest
echo "" 2>&1 | tee -a log.minitest

# log the version of hpctoolkit, and the compilers
hpcrun -V 2>&1 | tee -a log.minitest
echo "" 2>&1 | tee -a log.minitest
clang --version 2>&1 | tee -a log.minitest
echo "" 2>&1 | tee -a log.minitest
gcc --version 2>&1 | tee -a log.minitest
echo "" 2>&1 | tee -a log.minitest

# Check for GPUs
echo "======================== Checking for Nvidia GPUs ============================="  2>&1 | tee -a log.minitest
if [ -x /usr/bin/nvidia-smi ]; then
	hasnvidia=`nvidia-smi 2>&1 | grep "NVIDIA-SMI has failed" | wc -l`
	if [ $hasnvidia -eq 1 ]; then
	    echo "No NVIDIA GPU driver found" | tee -a log.minitest
	else
	    nvidia-smi 2>&1 | grep NVIDIA | tee -a log.minitest
	    echo "CUDA_HOME = $CUDA_HOME" | tee -a log.minitest
	fi
else
	echo "No NVIDIA GPUs found" | tee -a log.minitest
fi
echo "" 2>&1 | tee -a log.minitest
# echo "======================= End check for Nvidia GPUs ============================="  2>&1 | tee -a log.minitest

echo "======================== Checking for AMD GPUs ================================"  2>&1 | tee -a log.minitest
if [ -x `which rocm-smi` ]; then
	rocm-smi -i --showdriverversion  2>&1 | grep -v "=============" | grep -v "^$" | tee -a log.minitest
	echo -n "  AMD Firmware version: "  | tee -a log.minitest
	cat /sys/class/kfd/kfd/topology/nodes/*/properties | grep ^fw_version  2>&1 | uniq | tee -a log.minitest
	rocminfo | grep "gfx" | tee -a log.minitest
	echo "ROCM_PATH = $ROCM_PATH" | tee -a log.minitest
	AMD_ARCH=`rocminfo | grep " gfx" | uniq | sed 's/Name://' | sed 's/[ \t]*//' | sed 's/^/-march=/' | head -1`
	echo "AMD_ARCH = ${AMD_ARCH}" | tee -a log.minitest
else
	echo "No AMD GPUs found" | tee -a log.minitest
fi
# echo "======================= End check for AMD GPUs ================================"  2>&1 | tee -a log.minitest
echo "" 2>&1 | tee -a log.minitest

# To be added: chack for intel GPUs

# Now loop through the specified run directories, and issue the comand
echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" 2>&1 | tee -a log.minitest
for sd in "${RUNDIRS[@]}"
do
	echo "" 2>&1 | tee -a log.minitest
		echo "================================================================="  2>&1 | tee -a log.minitest
	if [ "${go}" == "ll" ]; then
		echo "cd'ing to ${sd} to run \"ls -lF\""  2>&1 | tee -a log.minitest
		(cd ${TOPDIR}/${sd} ; ls -lF )  2>&1 | tee -a log.minitest
	else
		echo "cd'ing to ${sd} to run \"make $1\""  2>&1 | tee -a log.minitest
		(cd ${TOPDIR}/${sd} ; make $1)  2>&1 | tee -a log.minitest
	fi
done
echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"  2>&1 | tee -a log.minitest
echo ""  2>&1 | tee -a log.minitest

# Now check if all test ran OK, or if there was some error
/bin/rm -f errs.minitest
grep ERROR log.minitest >> errs.minitest
grep "PLEASE submit a bug report to" log.minitest >> errs.minitest
grep "fatal error" log.minitest >> errs.minitest
grep "Error" log.minitest >> errs.minitest

errs=`cat errs.minitest | wc -l `

if  [ "${errs}" == "0" ]; then
	echo "SUCCESS"
else
	echo "FAILED -- ${errs} errors found (some may be double counted)"
fi
exit 0
